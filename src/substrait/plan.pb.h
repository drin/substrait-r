/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_SUBSTRAIT_SUBSTRAIT_PLAN_PB_H_INCLUDED
#define PB_SUBSTRAIT_SUBSTRAIT_PLAN_PB_H_INCLUDED
#include <pb.h>
#include "substrait/relations.pb.h"
#include "substrait/extensions/extensions.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Describe a set of operations to complete.
 For compactness sake, identifiers are normalized at the plan level. */
typedef struct _substrait_Plan { 
    /* a list of yaml specifications this plan may depend on */
    pb_callback_t extension_uris; 
    /* a list of extensions this plan may depend on */
    pb_callback_t extensions; 
    /* one or more relation trees that are associated with this plan. */
    pb_callback_t relations; 
    /* additional extensions associated with this plan. */
    pb_callback_t advanced_extensions; 
    /* A list of com.google.Any entities that this plan may use. Can be used to
 warn if some embedded message types are unknown. Note that this list may
 include message types that are ignorable (optimizations) or that are
 unused. In many cases, a consumer may be able to work with a plan even if
 one or more message types defined here are unknown. */
    pb_callback_t expected_type_urls; 
} substrait_Plan;

/* Either a relation or root relation */
typedef struct _substrait_PlanRel { 
    /* Any relation */
    pb_size_t which_rel_type;
    union {
        pb_callback_t rel;
        pb_callback_t root;
    } rel_type; 
} substrait_PlanRel;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define substrait_PlanRel_init_default           {0, {{{NULL}, NULL}}}
#define substrait_Plan_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define substrait_PlanRel_init_zero              {0, {{{NULL}, NULL}}}
#define substrait_Plan_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define substrait_Plan_extension_uris_tag        1
#define substrait_Plan_extensions_tag            2
#define substrait_Plan_relations_tag             3
#define substrait_Plan_advanced_extensions_tag   4
#define substrait_Plan_expected_type_urls_tag    5
#define substrait_PlanRel_rel_tag                1
#define substrait_PlanRel_root_tag               2

/* Struct field encoding specification for nanopb */
#define substrait_PlanRel_FIELDLIST(X, a) \
X(a, CALLBACK, ONEOF,    MESSAGE,  (rel_type,rel,rel_type.rel),   1) \
X(a, CALLBACK, ONEOF,    MESSAGE,  (rel_type,root,rel_type.root),   2)
#define substrait_PlanRel_CALLBACK pb_default_field_callback
#define substrait_PlanRel_DEFAULT NULL
#define substrait_PlanRel_rel_type_rel_MSGTYPE substrait_Rel
#define substrait_PlanRel_rel_type_root_MSGTYPE substrait_RelRoot

#define substrait_Plan_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  extension_uris,    1) \
X(a, CALLBACK, REPEATED, MESSAGE,  extensions,        2) \
X(a, CALLBACK, REPEATED, MESSAGE,  relations,         3) \
X(a, CALLBACK, OPTIONAL, MESSAGE,  advanced_extensions,   4) \
X(a, CALLBACK, REPEATED, STRING,   expected_type_urls,   5)
#define substrait_Plan_CALLBACK pb_default_field_callback
#define substrait_Plan_DEFAULT NULL
#define substrait_Plan_extension_uris_MSGTYPE substrait_extensions_SimpleExtensionURI
#define substrait_Plan_extensions_MSGTYPE substrait_extensions_SimpleExtensionDeclaration
#define substrait_Plan_relations_MSGTYPE substrait_PlanRel
#define substrait_Plan_advanced_extensions_MSGTYPE substrait_extensions_AdvancedExtension

extern const pb_msgdesc_t substrait_PlanRel_msg;
extern const pb_msgdesc_t substrait_Plan_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define substrait_PlanRel_fields &substrait_PlanRel_msg
#define substrait_Plan_fields &substrait_Plan_msg

/* Maximum encoded size of messages (where known) */
/* substrait_PlanRel_size depends on runtime parameters */
/* substrait_Plan_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
